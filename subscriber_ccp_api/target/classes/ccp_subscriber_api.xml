<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:context="http://www.springframework.org/schema/context" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd">
    <context:property-placeholder location="api.properties" />
    <apikit:config name="apiConfig" raml="api.raml" consoleEnabled="true" consolePath="console" doc:name="Router" />
    <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="${http.port}" doc:name="HTTP Listener Configuration" />
    <ws:consumer-config name="Web_Service_Consumer" wsdlLocation="http://10.112.132.74:8082/?wsdl" service="WebservicePublisherService" port="WebservicePublisherPort" serviceAddress="http://10.112.132.74:8082/" doc:name="Web Service Consumer"/>
    <data-mapper:config name="Xml_mcdLogicalMethodResponse__To_Map" transformationGraphPath="xml_mcdlogicalmethodresponse__to_map.grf" doc:name="Xml_mcdLogicalMethodResponse__To_Map"/>
    <flow name="main" >
        <http:listener config-ref="HTTP_Listener_Configuration" doc:name="HTTP" path="/api/*" />
        <apikit:router config-ref="apiConfig" doc:name="APIkit Router" />
        <exception-strategy ref="apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy" />
    </flow>
    <flow name="post:/ccp_subscriber:application/json:apiConfig">
        <dw:transform-message doc:name="Epsilon Service Request">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://hcl.com/
---
//Some output fields where skipped as the structure is too deep (more than 2 levels).
//To add missing fields click on the scaffold icon (second on the toolbar).
{
	ns0#mcdLogicalMethod: {
		arg0: {addressLine1: payload.Customer.AddressLine1,
			addressLine2: payload.Customer.AddressLine2,
			age: payload.Customer.Age,
			city: payload.Customer.City,
			createDate:payload.Customer.CreateDate,
			culture: payload.Customer.Culture,
			cultureInfo: payload.Customer.CultureInfo,
			DOB: payload.Customer.DOB,
			emailAddress: payload.Customer.EmailAddress,
			entryCode: payload.Customer.EntryCode,
			entryCodeType: payload.Customer.EntryCodeType,
			externalInfo: payload.Customer.ExternalInfo,
			firstName: payload.Customer.FirstName,
			inactiveIndicator: payload.Customer.InactiveIndicator,
			IP: payload.Customer.IP,
			lastName: payload.Customer.LastName,
			NVPairs: {NVPair: {name: payload.Customer.NVPairs.NVPair.Name,value: payload.Customer.NVPairs.NVPair.Value}},
			phoneNumber: payload.Customer.PhoneNumber,
			postalCode: payload.Customer.PostalCode,
			programID: payload.Customer.ProgramID,
			redeemedAt: payload.Customer.RedeemedAt,
			redemption: payload.Customer.Redemption,
			source: payload.Customer.Source,
			sourceApp: payload.Customer.SourceApp,
			sourceKey: payload.Customer.SourceKey,
			sourceSendDate: payload.Customer.SourceSendDate,
			state: payload.Customer.State,
			subProgramID: payload.Customer.SubProgramID,
			subscriptions: {subscription: {ID: payload.Customer.Subscriptions.Subscription.ID,optStatus:payload.Customer.Subscriptions.Subscription.OptStatus }},
			userID: payload.Customer.UserID
		
		}
	}
}]]></dw:set-payload>
        </dw:transform-message>
         <ws:consumer config-ref="Web_Service_Consumer" operation="mcdLogicalMethod" doc:name="Epsilon Agility service"/>
   <data-mapper:transform config-ref="Xml_mcdLogicalMethodResponse__To_Map" doc:name="Epsilon Service Response (XML to MAP)"/> 
        <logger message="#[&quot;Epsilon Response is &quot; +payload]" level="INFO" category="development_logger" doc:name="Log Epsilon Service Response"/>
        <set-variable variableName="status" value="#[payload.return.status]" doc:name="Status"/>
        <choice doc:name="Choice">
            <when expression="flowVars.status">
                <json:object-to-json-transformer doc:name="Object to JSON"/>
                <logger message="#[payload]" level="INFO" category="development_logger" doc:name="log Final response"/>
                <set-payload value="#[payload]" doc:name="Final response"/>
            </when>
            <otherwise>
                <logger message="#[payload]" level="INFO" category="development_logger" doc:name="Log Faliure Response"/>
                <set-payload value="{&quot;status&quot;: &quot;error&quot;,&quot;statusCode&quot;: 001&quot;,&quot;statusDescription&quot;: &quot;Vendor / Program / Key combination is invalid.&quot;,&quot;details&quot;: #[payload]}" doc:name="Faliure Response"/>
            </otherwise>
        </choice>

    </flow>
    <apikit:mapping-exception-strategy name="apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-variable variableName="errorString" value="#[exception]" doc:name="Exception"/>
            <choice doc:name="Choice">
                <when expression="exception.toString().contains(&quot;not a valid email address&quot;)">
                    <logger message="Invalid Email" level="INFO" category="development_logger" doc:name="Invalid Email"/>
                    <set-payload value="{&quot;status&quot;: &quot;error&quot;, &quot;statusCode&quot;: &quot;003&quot;,&quot;statusDescription&quot;: #[flowVars.errorString] ,  &quot;details&quot;: #[payload]} " doc:name="Payload - Invalid Email"/>
                </when>
                <when expression="exception.toString().contains(&quot;too long&quot;) || exception.toString().contains(&quot;too short&quot;)">
                    <logger message=" Invalid length" level="INFO" category="development_logger" doc:name=" Invalid length"/>
                    <set-payload value="{&quot;status&quot;: &quot;error&quot;,  &quot;statusCode&quot;: &quot;002&quot;,&quot;statusDescription&quot;: #[flowVars.errorString] , &quot;details&quot;: #[payload]} " doc:name="Payload - Invalid length"/>
                </when>
                <when expression="exception.toString().contains(&quot;object has missing required properties&quot;)">
                    <logger message="Missing required properties" level="INFO" category="development_logger" doc:name="Missing required properties"/>
                    <set-payload value="{&quot;status&quot;: &quot;error&quot;,&quot;statusCode&quot;: &quot;001&quot;,&quot;statusDescription&quot;:#[flowVars.errorString] ,&quot;details&quot;: #[payload]}" doc:name="Payload - Missing required properties"/>
                </when>
                <otherwise>
                    <logger message="Bad Request" level="INFO" category="development_logger" doc:name="Bad Request"/>
                    <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" doc:name="Payload - Bad Request"/>
                </otherwise>
            </choice>

        </apikit:mapping>
    </apikit:mapping-exception-strategy>
</mule>
